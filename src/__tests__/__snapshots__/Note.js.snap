// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Note should match snapshot with all data passed in 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Note
    deleteNote={[MockFunction]}
    itemsList={
      Array [
        Object {
          "id": 1554329952339,
          "isComplete": false,
          "text": "item",
        },
      ]
    }
    title="title"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <p>
          title
        </p>,
        <ul>
          <li>
            item
          </li>
        </ul>,
        <button
          onClick={[Function]}
        >
          Delete Note
        </button>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "title",
        },
        "ref": null,
        "rendered": "title",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <li>
              item
            </li>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "1554329952339",
            "nodeType": "host",
            "props": Object {
              "children": "item",
            },
            "ref": null,
            "rendered": "item",
            "type": "li",
          },
        ],
        "type": "ul",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Delete Note",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": "Delete Note",
        "type": "button",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <p>
            title
          </p>,
          <ul>
            <li>
              item
            </li>
          </ul>,
          <button
            onClick={[Function]}
          >
            Delete Note
          </button>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "title",
          },
          "ref": null,
          "rendered": "title",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <li>
                item
              </li>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "1554329952339",
              "nodeType": "host",
              "props": Object {
                "children": "item",
              },
              "ref": null,
              "rendered": "item",
              "type": "li",
            },
          ],
          "type": "ul",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Delete Note",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": "Delete Note",
          "type": "button",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
